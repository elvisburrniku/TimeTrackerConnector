// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  sessions              Session[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  // Relations
  departments         EmployeeDepartment[]
  timeEntries         TimeEntry[]
  timeOffRequests     TimeOffRequest[]
  approvedTimeoffs    TimeOffRequest[]     @relation("ApprovedBy")
  approvedEntries     TimeEntry[]          @relation("TimeEntryApprover")
  replacementRequests TimeOffRequest[]     @relation("Replacement")
  departmentSchedules DepartmentSchedule[]
  createdSchedules    DepartmentSchedule[] @relation("ScheduleCreator")
  notifications       Notification[]

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType  @default(MESSAGE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  actionUrl String?
  read      Boolean          @default(false)
  priority              NotificationPriority   @default(LOW)
  relatedEntityType    RelatedEntityType     @default(NOTIFICATION)
  relatedEntityId String?


  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("notifications")
}

model Department {
  id        String   @id @default(cuid())
  name      String
  info      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employees   EmployeeDepartment[]
  timeEntries TimeEntry[]
  schedules   DepartmentSchedule[]

  @@map("departments")
}

model EmployeeDepartment {
  id         String   @id @default(cuid())
  hourlyRate Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  employee     User                   @relation(fields: [userId], references: [id])
  userId       String
  department   Department             @relation(fields: [departmentId], references: [id])
  departmentId String
  role         EmployeeDepartmentRole @default(EMPLOYEE)
  position     String?

  @@unique([userId, departmentId])
  @@map("employee_departments")
}

model TimeEntry {
  id         String          @id @default(cuid())
  clockIn    DateTime
  clockOut   DateTime?
  status     TimeEntryStatus @default(PENDING)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  approvedAt DateTime?
  hours      Decimal         @db.Decimal(10, 2)

  // Relations
  employee     User       @relation(fields: [userId], references: [id])
  userId       String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  approvedBy   User?      @relation("TimeEntryApprover", fields: [approvedById], references: [id])
  approvedById String?

  @@index([userId])
  @@index([departmentId])
  @@map("time_entries")
}

model TimeOffRequest {
  id          String          @id @default(cuid())
  startDate   DateTime        @db.Date
  endDate     DateTime        @db.Date
  requestType TimeOffRequestType @default(PERSONAL)
  status      TimeEntryStatus @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  approvedAt  DateTime?
  message     String?

  // Relations
  employee     User    @relation(fields: [userId], references: [id])
  userId       String
  approvedBy   User?   @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedById String?

  replacementEmployee User?   @relation("Replacement", fields: [replacementId], references: [id])
  replacementId       String?

  @@index([startDate, endDate])
  @@map("time_off_requests")
}

model Holiday {
  id        String   @id @default(cuid())
  date      DateTime @db.Date
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("holidays")
}

model DepartmentSchedule {
  id        String      @id @default(cuid())
  weekStart DateTime    @db.Date
  weekEnd   DateTime    @db.Date
  schedules WorkShift[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  employee     User       @relation(fields: [userId], references: [id])
  userId       String
  createdBy    User       @relation("ScheduleCreator", fields: [createdById], references: [id])
  createdById  String

  @@index([weekStart, weekEnd])
  @@map("department_schedules")
}

model WorkShift {
  id          String   @id @default(cuid())
  dayOfWeek   Int // 0-6 for Sunday-Saturday
  startTime   DateTime @db.Time
  endTime     DateTime @db.Time
  isRecurring Boolean  @default(false)

  // Relations
  schedule   DepartmentSchedule @relation(fields: [scheduleId], references: [id])
  scheduleId String

  @@map("work_shifts")
}

enum EmployeeDepartmentRole {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum TimeEntryStatus {
  NOTSUBMITTED
  CANCELLED
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  CLOCKED_OUT
  TIMESHEET_PENDING
  TIMESHEET_APPROVED
  TIMESHEET_REJECTED
  TIMESHEET_DEPARTMENT_APPROVED_ALL
  MESSAGE
  ALERT
  REMINDER
  UPDATE
  ERROR
  SCHEDULE_UPDATED
  SCHEDULE_CONFLICT
  MISSING_CLOCKOUT
  EARLY_LEAVE
  OVERTIME_ALERT
  DEPARTMENT_ADDED
  DEPARTMENT_REMOVED
  ROLE_UPDATED
  SYSTEM_ALERT
  TIME_OFF_REQUEST_REJECTED
  TIME_OFF_REQUEST_APPROVED
  TIME_OFF_REQUEST_PENDING
  TIMESHEET_APPROVED_ALL
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}


enum RelatedEntityType {
  USER
  DEPARTMENT
  TIMEOFF
  TIMEENTRY
  SCHEDULE
  TIMESHEET
  NOTIFICATION
  TIME_ENTRY
}

enum TimeOffRequestType {
  VACATION
  SICK
  PERSONAL
  UNPAID
  OTHER
}